import numpy as np 
import pandas as pd
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
/kaggle/input/creditcardfraud/creditcard.csv
df=pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv')
df.info()
df.head()
df.describe()
X=df.drop(['Class'],axis=1)
y=df['Class']
numeric_features=X.select_dtypes(include=['int64','float']).columns
print(numeric_features)
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns
for feature in numeric_features:
    sns.histplot(df[feature],kde=True)
    plt.title(f'{feature} Distribution')
    plt.show()
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegressionCV
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X_scaled=scaler.fit_transform(X)
y=y.values.reshape(-1,1)
y_scaled=scaler.fit_transform(y)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)
model=LogisticRegressionCV()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print('Accuracy score:', accuracy_score(y_pred,y_test)*100)
print(confusion_matrix(y_pred,y_test))
print(classification_report(y_pred,y_test))
model=AdaBoostClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print('Accuracy score:', accuracy_score(y_pred,y_test)*100)
print(confusion_matrix(y_pred,y_test))
print(classification_report(y_pred,y_test))
model=XGBClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print('Accuracy score:', accuracy_score(y_pred,y_test)*100)
print(confusion_matrix(y_pred,y_test))
print(classification_report(y_pred,y_test))
model=RandomForestClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print('Accuracy score:', accuracy_score(y_pred,y_test)*100)
print(confusion_matrix(y_pred,y_test))
print(classification_report(y_pred,y_test))
